Django Environment Setup Guide
Prerequisites
Before starting, make sure you have Python installed on your system:
Check Python Installation
bashpython --version
# or
python3 --version
If Python is not installed, download it from python.org

Step 1: Create Project Directory
bash# Create a new directory for your project
mkdir fresh-market-ecommerce
cd fresh-market-ecommerce

Step 2: Create Virtual Environment
On Windows:
bash# Create virtual environment
python -m venv venv

# Activate virtual environment
venv\Scripts\activate
On macOS/Linux:
bash# Create virtual environment
python3 -m venv venv

# Activate virtual environment
source venv/bin/activate
Verify Virtual Environment is Active
When activated, you should see (venv) at the beginning of your command prompt:
bash(venv) C:\your-project-directory>

Step 3: Create requirements.txt File
Create a file named requirements.txt in your project directory with the following content:
txtDjango==4.2.0
Pillow==10.0.0
django-allauth==0.54.0
google-auth==2.22.0
google-auth-oauthlib==1.0.0
google-auth-httplib2==0.1.0
qrcode==7.4.2

Step 4: Install Dependencies from requirements.txt
bash# Install all packages from requirements.txt
pip install -r requirements.txt
Alternative: Install packages individually
bashpip install Django==4.2.0
pip install Pillow==10.0.0
pip install django-allauth==0.54.0
pip install google-auth==2.22.0
pip install google-auth-oauthlib==1.0.0
pip install google-auth-httplib2==0.1.0
pip install qrcode==7.4.2

Step 5: Verify Installation
bash# Check installed packages
pip list

# Check Django version specifically
python -m django --version

Step 6: Create Django Project
bash# Create Django project
django-admin startproject ecommerce_project .

# Create Django apps
python manage.py startapp store
python manage.py startapp accounts

Step 7: Create Directory Structure
bash# Create additional directories
mkdir templates
mkdir static
mkdir media
mkdir templates/store
mkdir templates/accounts
mkdir templates/admin
mkdir static/css
mkdir static/js
mkdir static/images
mkdir media/products
mkdir media/carousel
mkdir media/qr_codes

Step 8: Initial Django Setup
bash# Apply initial migrations
python manage.py migrate

# Create superuser (admin account)
python manage.py createsuperuser
Follow the prompts to create your admin account.

Step 9: Test the Setup
bash# Run development server
python manage.py runserver
Visit http://127.0.0.1:8000/ in your browser to see the Django welcome page.

Common Issues and Solutions
Issue 1: pip command not found
Solution:
bash# On Windows
python -m pip install -r requirements.txt

# On macOS/Linux
python3 -m pip install -r requirements.txt
Issue 2: Permission denied errors
Solution:
bash# Add --user flag
pip install --user -r requirements.txt
Issue 3: Virtual environment not activating
Solution:
bash# On Windows (PowerShell)
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
venv\Scripts\Activate.ps1

# On Windows (Command Prompt)
venv\Scripts\activate.bat
Issue 4: Package installation fails
Solution:
bash# Update pip first
pip install --upgrade pip

# Then install requirements
pip install -r requirements.txt

Package Descriptions
PackagePurposeDjangoWeb framework for building the applicationPillowImage processing library for product imagesdjango-allauthAuthentication system with social logingoogle-authGoogle authentication core librarygoogle-auth-oauthlibOAuth2 flow for Google logingoogle-auth-httplib2HTTP transport for Google APIsqrcodeGenerate QR codes for payment

Development Workflow Commands
bash# Activate virtual environment (every time you work on the project)
# Windows:
venv\Scripts\activate
# macOS/Linux:
source venv/bin/activate

# Install new packages and update requirements.txt
pip install package_name
pip freeze > requirements.txt

# Apply database changes
python manage.py makemigrations
python manage.py migrate

# Run development server
python manage.py runserver

# Deactivate virtual environment when done
deactivate

Environment Variables (Optional but Recommended)
Create a .env file for sensitive settings:
bash# .env file
SECRET_KEY=your-secret-key-here
DEBUG=True
GOOGLE_OAUTH2_CLIENT_ID=your-google-client-id
GOOGLE_OAUTH2_CLIENT_SECRET=your-google-client-secret
Install python-decouple to use environment variables:
bashpip install python-decouple

Production Considerations
For production deployment, create a separate requirements-prod.txt:
txtDjango==4.2.0
Pillow==10.0.0
django-allauth==0.54.0
google-auth==2.22.0
google-auth-oauthlib==1.0.0
google-auth-httplib2==0.1.0
qrcode==7.4.2
gunicorn==21.2.0
psycopg2-binary==2.9.7
whitenoise==6.5.0

Quick Setup Script
Create a setup.sh (Linux/Mac) or setup.bat (Windows) file:
setup.sh (Linux/Mac):
bash#!/bin/bash
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt
python manage.py migrate
echo "Setup complete! Run 'source venv/bin/activate' to activate the environment."
setup.bat (Windows):
batch@echo off
python -m venv venv
call venv\Scripts\activate
pip install --upgrade pip
pip install -r requirements.txt
python manage.py migrate
echo Setup complete! Run 'venv\Scripts\activate' to activate the environment.
Make it executable and run:
bash# Linux/Mac
chmod +x setup.sh
./setup.sh

# Windows
setup.bat
